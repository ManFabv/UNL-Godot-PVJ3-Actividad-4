[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

//color de tint a aplicar al sprite
uniform vec4 tint_color : hint_color = vec4(0.5, 0.5, 0.5, 1.0);
//si el pixel tiene un brillo menor (la suma de los colores de cada channel dividido en cantidad de canales de color), aplica el tint
uniform float tint_apply_treshold : hint_range(0.1, 1.0) = 0.75;
//si debe o no aplicar el tint
uniform bool apply_tint = false;

//si debe cambiar el color para hacer el weapon charge
uniform bool apply_charge = false;

vec4 apply_tint_to_pixel(vec4 pixel_color)
{
	// si el color actual se pasa un cierto valor, consideramos que no se tiene que aplicar el tint
	// esto nos sirve para evitar por ejemplo, aplicar el tint en la cara del personaje
	// Se trata del \"promedio\" del color del pixel
	float pixel_brightness = (pixel_color.r + pixel_color.g + pixel_color.b) / 3.0;
	// tomamos el color \"neutro\" para poder multiplicarlo por el tint
	vec4 grayscale = vec4(pixel_brightness, pixel_brightness, pixel_brightness, pixel_color.a);
	
	// si tiene que aplicar el tint (se selecciono un arma distinta a default)
	// y ademas el threshold de brillo se cumple, aplicamos el tint
	if(pixel_brightness <= tint_apply_treshold)
	{
		return grayscale * tint_color; //\"anulamos\" el color y aplicamos el tint
	}
	else // de lo contrario aplicamos el color normal
	{
		return pixel_color;
	}
}

vec4 apply_charge_to_pixel(vec4 pixel_color)
{
	return pixel_color;
}

void fragment()
{
	vec4 pixel_color = texture(TEXTURE, UV);
	
	if(apply_charge)
	{
		COLOR = apply_charge_to_pixel(pixel_color * 2.0f);
	}
	else if(!apply_tint) //si no tenemos que aplicar el tint, aplicamos el color normal
	{
		COLOR = pixel_color;
	}
	else //aplicamos el tint
	{
		COLOR = apply_tint_to_pixel(pixel_color);
	}
}
"
